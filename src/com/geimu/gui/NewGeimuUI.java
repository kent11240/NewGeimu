package com.geimu.gui;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.geimu.domain.Enemy;
import com.geimu.domain.Message;
import com.geimu.domain.Player;
import com.geimu.service.BattleService;
import com.geimu.service.PlayerService;
import com.geimu.service.SkillService;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JToolTip;
import javax.swing.Timer;

public class NewGeimuUI extends javax.swing.JFrame {

    public static Player player = new Player();
    private static Enemy enemy;
    private Timer mpRecoverTimer = null;

    private Timer playerTimer = null;
    private Timer enemyTimer = null;

    private Timer bladeTimer = null;
    private Timer blessTimer = null;

    private Timer fireCoolDownTimer = null;
    private Timer bladeCoolDownTimer = null;
    private Timer healCoolDownTimer = null;
    private Timer blessCoolDownTimer = null;
    private Timer curseCoolDownTimer = null;

    private final BattleService battleService = new BattleService();
    private final PlayerService playerService = new PlayerService();
    private final SkillService skillService = new SkillService();

    /**
     * Creates new form NewGeimuUI
     */
    public NewGeimuUI() {
        initComponents();
        this.setLocationRelativeTo(null);
        initGeimu();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        playerPanel = new javax.swing.JPanel();
        playerTextLabel = new javax.swing.JLabel();
        levelTextLabel = new javax.swing.JLabel();
        levelLabel = new javax.swing.JLabel();
        hpTextLabel = new javax.swing.JLabel();
        hpLabel = new javax.swing.JLabel();
        hpSplitTextLabel = new javax.swing.JLabel();
        hpMaxLabel = new javax.swing.JLabel();
        mpTextLabel = new javax.swing.JLabel();
        mpLabel = new javax.swing.JLabel();
        mpSplitTextLabel = new javax.swing.JLabel();
        mpMaxLabel = new javax.swing.JLabel();
        expTextLabel = new javax.swing.JLabel();
        expLabel = new javax.swing.JLabel();
        expSplitTextLabel = new javax.swing.JLabel();
        expMaxLabel = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        expProgressBar = new javax.swing.JProgressBar();
        statusPanel = new javax.swing.JPanel();
        statusTextLabel = new javax.swing.JLabel();
        strTextLabel = new javax.swing.JLabel();
        strLabel = new javax.swing.JLabel();
        addStrLabel = new javax.swing.JLabel();
        agiTextLabel = new javax.swing.JLabel();
        agiLabel = new javax.swing.JLabel();
        addAgiLabel = new javax.swing.JLabel();
        vitTextLabel = new javax.swing.JLabel();
        vitLabel = new javax.swing.JLabel();
        addVitLabel = new javax.swing.JLabel();
        wisTextLabel = new javax.swing.JLabel();
        wisLabel = new javax.swing.JLabel();
        addWisLabel = new javax.swing.JLabel();
        dexTextLabel = new javax.swing.JLabel();
        dexLabel = new javax.swing.JLabel();
        addDexLabel = new javax.swing.JLabel();
        lukTextLabel = new javax.swing.JLabel();
        lukLabel = new javax.swing.JLabel();
        addLukLabel = new javax.swing.JLabel();
        pointsTextLabel = new javax.swing.JLabel();
        pointsLabel = new javax.swing.JLabel();
        battleMsgPanel = new javax.swing.JPanel();
        ballteMsgScrollPane = new javax.swing.JScrollPane();
        battleMsg = new javax.swing.JTextArea();
        enemyPanel = new javax.swing.JPanel();
        monNameTextLabel = new javax.swing.JLabel();
        monLevelTextLabel = new javax.swing.JLabel();
        monLevelLabel = new javax.swing.JLabel();
        monHpTextLabel = new javax.swing.JLabel();
        monHpLabel = new javax.swing.JLabel();
        monHpSplitTextLabel = new javax.swing.JLabel();
        monHpMaxLabel = new javax.swing.JLabel();
        travelButton = new javax.swing.JButton();
        skillPanel = new javax.swing.JPanel();
        skillsTextLabel = new javax.swing.JLabel();
        skillPointsTextLabel = new javax.swing.JLabel();
        skillPointsLabel = new javax.swing.JLabel();
        fireToggleButton = new javax.swing.JToggleButton(){      public JToolTip createToolTip() {          JToolTip tip = super.createToolTip();          tip.setFont(new Font("微軟正黑體", 0, 12));          tip.setBackground(new Color(242,242,189));          tip.setBorder(BorderFactory.createLineBorder(new Color(146,151,161), 1, true));          return tip;      }  };  ;
        fireLevelTextLabel = new javax.swing.JLabel();
        fireLevelLabel = new javax.swing.JLabel();
        addFireLabel = new javax.swing.JLabel();
        bladeToggleButton = new javax.swing.JToggleButton(){
            public JToolTip createToolTip() {
                JToolTip tip = super.createToolTip();
                tip.setFont(new Font("微軟正黑體", 0, 12));
                tip.setBackground(new Color(242,242,189));
                tip.setBorder(BorderFactory.createLineBorder(new Color(146,151,161), 1, true));
                return tip;
            }
        };
        ;
        bladeLevelTextLabel = new javax.swing.JLabel();
        bladeLevelLabel = new javax.swing.JLabel();
        addBladeLabel = new javax.swing.JLabel();
        healToggleButton = new javax.swing.JToggleButton(){      public JToolTip createToolTip() {          JToolTip tip = super.createToolTip();          tip.setFont(new Font("微軟正黑體", 0, 12));          tip.setBackground(new Color(242,242,189));          tip.setBorder(BorderFactory.createLineBorder(new Color(146,151,161), 1, true));          return tip;      }  };  ;
        healLevelTextLabel = new javax.swing.JLabel();
        healLevelLabel = new javax.swing.JLabel();
        addHealLabel = new javax.swing.JLabel();
        blessToggleButton = new javax.swing.JToggleButton(){      public JToolTip createToolTip() {          JToolTip tip = super.createToolTip();          tip.setFont(new Font("微軟正黑體", 0, 12));          tip.setBackground(new Color(242,242,189));          tip.setBorder(BorderFactory.createLineBorder(new Color(146,151,161), 1, true));          return tip;      }  };  ;
        blessLevelTextLabel = new javax.swing.JLabel();
        blessLevelLabel = new javax.swing.JLabel();
        addBlessLabel = new javax.swing.JLabel();
        curseToggleButton = new javax.swing.JToggleButton(){      public JToolTip createToolTip() {          JToolTip tip = super.createToolTip();          tip.setFont(new Font("微軟正黑體", 0, 12));          tip.setBackground(new Color(242,242,189));          tip.setBorder(BorderFactory.createLineBorder(new Color(146,151,161), 1, true));          return tip;      }  };  ;
        curseLevelTextLabel = new javax.swing.JLabel();
        curseLevelLabel = new javax.swing.JLabel();
        addCurseLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Geimu");

        mainPanel.setLayout(new java.awt.BorderLayout());

        playerPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        playerTextLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        playerTextLabel.setText("玩家");

        levelTextLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        levelTextLabel.setText("等級：");

        levelLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        levelLabel.setText("-");

        hpTextLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        hpTextLabel.setText("HP：");

        hpLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        hpLabel.setText("-");

        hpSplitTextLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        hpSplitTextLabel.setText("/");

        hpMaxLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        hpMaxLabel.setText("-");

        mpTextLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        mpTextLabel.setText("MP：");

        mpLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        mpLabel.setText("-");

        mpSplitTextLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        mpSplitTextLabel.setText("/");

        mpMaxLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        mpMaxLabel.setText("-");

        expTextLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        expTextLabel.setText("經驗值：");

        expLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        expLabel.setText("-");

        expSplitTextLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        expSplitTextLabel.setText("/");

        expMaxLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        expMaxLabel.setText("-");

        saveButton.setText("存檔");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        loadButton.setText("讀取");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        expProgressBar.setForeground(new java.awt.Color(0, 255, 0));
        expProgressBar.setToolTipText("0%");
        expProgressBar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        expProgressBar.setString("");

        javax.swing.GroupLayout playerPanelLayout = new javax.swing.GroupLayout(playerPanel);
        playerPanel.setLayout(playerPanelLayout);
        playerPanelLayout.setHorizontalGroup(
            playerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(playerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(expProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 517, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(playerPanelLayout.createSequentialGroup()
                        .addComponent(playerTextLabel)
                        .addGap(18, 18, 18)
                        .addComponent(levelTextLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(levelLabel)
                        .addGap(18, 18, 18)
                        .addComponent(hpTextLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hpLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hpSplitTextLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hpMaxLabel)
                        .addGap(18, 18, 18)
                        .addComponent(mpTextLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mpLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mpSplitTextLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mpMaxLabel))
                    .addGroup(playerPanelLayout.createSequentialGroup()
                        .addComponent(expTextLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(expLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(expSplitTextLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(expMaxLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loadButton)))
                .addGap(25, 25, 25))
        );
        playerPanelLayout.setVerticalGroup(
            playerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(playerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playerTextLabel)
                    .addComponent(levelTextLabel)
                    .addComponent(levelLabel)
                    .addComponent(hpTextLabel)
                    .addComponent(hpLabel)
                    .addComponent(hpSplitTextLabel)
                    .addComponent(hpMaxLabel)
                    .addComponent(mpTextLabel)
                    .addComponent(mpLabel)
                    .addComponent(mpSplitTextLabel)
                    .addComponent(mpMaxLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(playerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(expTextLabel)
                    .addComponent(expLabel)
                    .addComponent(expSplitTextLabel)
                    .addComponent(expMaxLabel)
                    .addComponent(saveButton)
                    .addComponent(loadButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(expProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        mainPanel.add(playerPanel, java.awt.BorderLayout.NORTH);

        statusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        statusTextLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        statusTextLabel.setText("素質");

        strTextLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        strTextLabel.setText("STR：");

        strLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        strLabel.setText("-");

        addStrLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        addStrLabel.setText("[+]");
        addStrLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addStrLabelMouseClicked(evt);
            }
        });

        agiTextLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        agiTextLabel.setText("AGI：");

        agiLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        agiLabel.setText("-");

        addAgiLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        addAgiLabel.setText("[+]");
        addAgiLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addAgiLabelMouseClicked(evt);
            }
        });

        vitTextLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        vitTextLabel.setText("VIT：");

        vitLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        vitLabel.setText("-");

        addVitLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        addVitLabel.setText("[+]");
        addVitLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addVitLabelMouseClicked(evt);
            }
        });

        wisTextLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        wisTextLabel.setText("WIS：");

        wisLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        wisLabel.setText("-");

        addWisLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        addWisLabel.setText("[+]");
        addWisLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addWisLabelMouseClicked(evt);
            }
        });

        dexTextLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        dexTextLabel.setText("DEX：");

        dexLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        dexLabel.setText("-");

        addDexLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        addDexLabel.setText("[+]");
        addDexLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addDexLabelMouseClicked(evt);
            }
        });

        lukTextLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        lukTextLabel.setText("LUK：");

        lukLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        lukLabel.setText("-");

        addLukLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        addLukLabel.setText("[+]");
        addLukLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addLukLabelMouseClicked(evt);
            }
        });

        pointsTextLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        pointsTextLabel.setText("剩餘點數：");

        pointsLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        pointsLabel.setText("-");

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statusTextLabel)
                    .addGroup(statusPanelLayout.createSequentialGroup()
                        .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(strTextLabel)
                            .addComponent(agiTextLabel)
                            .addComponent(vitTextLabel)
                            .addComponent(wisTextLabel)
                            .addComponent(dexTextLabel)
                            .addComponent(lukTextLabel)
                            .addComponent(pointsTextLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(strLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(agiLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(vitLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(wisLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(dexLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lukLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(pointsLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addStrLabel)
                            .addComponent(addAgiLabel)
                            .addComponent(addVitLabel)
                            .addComponent(addWisLabel)
                            .addComponent(addDexLabel)
                            .addComponent(addLukLabel))))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusTextLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addStrLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(strTextLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(strLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(agiTextLabel)
                    .addComponent(agiLabel)
                    .addComponent(addAgiLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vitTextLabel)
                    .addComponent(vitLabel)
                    .addComponent(addVitLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wisTextLabel)
                    .addComponent(wisLabel)
                    .addComponent(addWisLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dexTextLabel)
                    .addComponent(dexLabel)
                    .addComponent(addDexLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lukTextLabel)
                    .addComponent(lukLabel)
                    .addComponent(addLukLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pointsTextLabel)
                    .addComponent(pointsLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainPanel.add(statusPanel, java.awt.BorderLayout.WEST);

        battleMsgPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        battleMsg.setEditable(false);
        battleMsg.setFont(new java.awt.Font("新細明體", 0, 12)); // NOI18N
        battleMsg.setLineWrap(true);
        battleMsg.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                battleMsgKeyReleased(evt);
            }
        });
        ballteMsgScrollPane.setViewportView(battleMsg);

        javax.swing.GroupLayout battleMsgPanelLayout = new javax.swing.GroupLayout(battleMsgPanel);
        battleMsgPanel.setLayout(battleMsgPanelLayout);
        battleMsgPanelLayout.setHorizontalGroup(
            battleMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ballteMsgScrollPane)
        );
        battleMsgPanelLayout.setVerticalGroup(
            battleMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ballteMsgScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        mainPanel.add(battleMsgPanel, java.awt.BorderLayout.CENTER);

        enemyPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        monNameTextLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        monNameTextLabel.setText("敵人");

        monLevelTextLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        monLevelTextLabel.setText("等級：");

        monLevelLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        monLevelLabel.setText("-");

        monHpTextLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        monHpTextLabel.setText("HP：");

        monHpLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        monHpLabel.setText("-");

        monHpSplitTextLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        monHpSplitTextLabel.setText("/");

        monHpMaxLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        monHpMaxLabel.setText("-");

        travelButton.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        travelButton.setText("開始戰鬥");
        travelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                travelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout enemyPanelLayout = new javax.swing.GroupLayout(enemyPanel);
        enemyPanel.setLayout(enemyPanelLayout);
        enemyPanelLayout.setHorizontalGroup(
            enemyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(enemyPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(enemyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(travelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(enemyPanelLayout.createSequentialGroup()
                        .addComponent(monHpTextLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(monHpLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(monHpSplitTextLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(monHpMaxLabel))
                    .addGroup(enemyPanelLayout.createSequentialGroup()
                        .addComponent(monNameTextLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(monLevelTextLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(monLevelLabel)))
                .addGap(29, 29, 29))
        );
        enemyPanelLayout.setVerticalGroup(
            enemyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(enemyPanelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(enemyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(monNameTextLabel)
                    .addComponent(monLevelTextLabel)
                    .addComponent(monLevelLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(enemyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(monHpTextLabel)
                    .addComponent(monHpLabel)
                    .addComponent(monHpSplitTextLabel)
                    .addComponent(monHpMaxLabel))
                .addGap(46, 46, 46)
                .addComponent(travelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainPanel.add(enemyPanel, java.awt.BorderLayout.EAST);

        skillPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        skillsTextLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        skillsTextLabel.setText("技能");

        skillPointsTextLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        skillPointsTextLabel.setText("剩餘技能點數：");

        skillPointsLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        skillPointsLabel.setText("-");

        fireToggleButton.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        fireToggleButton.setText("火球術");
        fireToggleButton.setToolTipText("直接對敵人造成火焰傷害，冷卻時間5秒(效果受到WIS影響)");
        fireToggleButton.setEnabled(false);
        fireToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fireToggleButtonActionPerformed(evt);
            }
        });

        fireLevelTextLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        fireLevelTextLabel.setText("Lv.");

        fireLevelLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        fireLevelLabel.setText("-");

        addFireLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        addFireLabel.setText("[+]");
        addFireLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addFireLabelMouseClicked(evt);
            }
        });

        bladeToggleButton.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        bladeToggleButton.setText("魔力劍");
        bladeToggleButton.setToolTipText("對武器注入魔力，持續40秒，冷卻時間15秒(效果受到WIS影響)");
        bladeToggleButton.setEnabled(false);
        bladeToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bladeToggleButtonActionPerformed(evt);
            }
        });

        bladeLevelTextLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        bladeLevelTextLabel.setText("Lv.");

        bladeLevelLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        bladeLevelLabel.setText("-");

        addBladeLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        addBladeLabel.setText("[+]");
        addBladeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addBladeLabelMouseClicked(evt);
            }
        });

        healToggleButton.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        healToggleButton.setText("治癒術");
        healToggleButton.setToolTipText("立即恢復玩家生命值，冷卻時間10秒(效果受到WIS影響)");
        healToggleButton.setEnabled(false);
        healToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                healToggleButtonActionPerformed(evt);
            }
        });

        healLevelTextLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        healLevelTextLabel.setText("Lv.");

        healLevelLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        healLevelLabel.setText("-");

        addHealLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        addHealLabel.setText("[+]");
        addHealLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addHealLabelMouseClicked(evt);
            }
        });

        blessToggleButton.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        blessToggleButton.setText("祝福術");
        blessToggleButton.setToolTipText("使玩家全能力提升，持續30秒，冷卻時間15秒");
        blessToggleButton.setEnabled(false);
        blessToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blessToggleButtonActionPerformed(evt);
            }
        });

        blessLevelTextLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        blessLevelTextLabel.setText("Lv.");

        blessLevelLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        blessLevelLabel.setText("-");

        addBlessLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        addBlessLabel.setText("[+]");
        addBlessLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addBlessLabelMouseClicked(evt);
            }
        });

        curseToggleButton.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        curseToggleButton.setText("詛咒術");
        curseToggleButton.setToolTipText("大幅降低敵人所有能力，冷卻時間40秒");
        curseToggleButton.setEnabled(false);
        curseToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                curseToggleButtonActionPerformed(evt);
            }
        });

        curseLevelTextLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        curseLevelTextLabel.setText("Lv.");

        curseLevelLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        curseLevelLabel.setText("-");

        addCurseLabel.setFont(new java.awt.Font("微軟正黑體", 0, 12)); // NOI18N
        addCurseLabel.setText("[+]");
        addCurseLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addCurseLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout skillPanelLayout = new javax.swing.GroupLayout(skillPanel);
        skillPanel.setLayout(skillPanelLayout);
        skillPanelLayout.setHorizontalGroup(
            skillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(skillPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(skillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(skillPanelLayout.createSequentialGroup()
                        .addGroup(skillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(fireToggleButton)
                            .addGroup(skillPanelLayout.createSequentialGroup()
                                .addComponent(fireLevelTextLabel)
                                .addGap(2, 2, 2)
                                .addComponent(fireLevelLabel))
                            .addComponent(addFireLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(skillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(bladeToggleButton)
                            .addGroup(skillPanelLayout.createSequentialGroup()
                                .addComponent(bladeLevelTextLabel)
                                .addGap(2, 2, 2)
                                .addComponent(bladeLevelLabel))
                            .addComponent(addBladeLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(skillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(healToggleButton)
                            .addGroup(skillPanelLayout.createSequentialGroup()
                                .addComponent(healLevelTextLabel)
                                .addGap(2, 2, 2)
                                .addComponent(healLevelLabel))
                            .addComponent(addHealLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(skillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(blessToggleButton)
                            .addGroup(skillPanelLayout.createSequentialGroup()
                                .addComponent(blessLevelTextLabel)
                                .addGap(2, 2, 2)
                                .addComponent(blessLevelLabel))
                            .addComponent(addBlessLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(skillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(curseToggleButton)
                            .addGroup(skillPanelLayout.createSequentialGroup()
                                .addComponent(curseLevelTextLabel)
                                .addGap(2, 2, 2)
                                .addComponent(curseLevelLabel))
                            .addComponent(addCurseLabel)))
                    .addGroup(skillPanelLayout.createSequentialGroup()
                        .addComponent(skillsTextLabel)
                        .addGap(45, 45, 45)
                        .addComponent(skillPointsTextLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(skillPointsLabel)))
                .addContainerGap(166, Short.MAX_VALUE))
        );
        skillPanelLayout.setVerticalGroup(
            skillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(skillPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(skillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(skillsTextLabel)
                    .addComponent(skillPointsTextLabel)
                    .addComponent(skillPointsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(skillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fireToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bladeToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(healToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(blessToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(curseToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(skillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(fireLevelTextLabel)
                    .addComponent(fireLevelLabel)
                    .addComponent(bladeLevelTextLabel)
                    .addComponent(bladeLevelLabel)
                    .addComponent(healLevelTextLabel)
                    .addComponent(healLevelLabel)
                    .addComponent(blessLevelTextLabel)
                    .addComponent(blessLevelLabel)
                    .addComponent(curseLevelTextLabel)
                    .addComponent(curseLevelLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(skillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(addFireLabel)
                    .addComponent(addBladeLabel)
                    .addComponent(addHealLabel)
                    .addComponent(addBlessLabel)
                    .addComponent(addCurseLabel))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        mainPanel.add(skillPanel, java.awt.BorderLayout.SOUTH);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addLukLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addLukLabelMouseClicked
        playerService.addPoint(player, "luk", bladeTimer != null ? bladeTimer.isRunning() : false, blessTimer != null ? blessTimer.isRunning() : false);
        lukLabel.setText(String.valueOf(player.getLuk()));
        pointsLabel.setText(String.valueOf(player.getPoints()));
    }//GEN-LAST:event_addLukLabelMouseClicked

    private void addDexLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addDexLabelMouseClicked
        playerService.addPoint(player, "dex", bladeTimer != null ? bladeTimer.isRunning() : false, blessTimer != null ? blessTimer.isRunning() : false);
        dexLabel.setText(String.valueOf(player.getDex()));
        pointsLabel.setText(String.valueOf(player.getPoints()));
    }//GEN-LAST:event_addDexLabelMouseClicked

    private void addWisLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addWisLabelMouseClicked
        playerService.addPoint(player, "wis", bladeTimer != null ? bladeTimer.isRunning() : false, blessTimer != null ? blessTimer.isRunning() : false);
        wisLabel.setText(String.valueOf(player.getWis()));
        mpLabel.setText(String.valueOf(player.getMp()));
        mpMaxLabel.setText(String.valueOf(player.getMpMax()));
        pointsLabel.setText(String.valueOf(player.getPoints()));
    }//GEN-LAST:event_addWisLabelMouseClicked

    private void addVitLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addVitLabelMouseClicked
        playerService.addPoint(player, "vit", bladeTimer != null ? bladeTimer.isRunning() : false, blessTimer != null ? blessTimer.isRunning() : false);
        vitLabel.setText(String.valueOf(player.getVit()));
        hpLabel.setText(String.valueOf(player.getHp()));
        hpMaxLabel.setText(String.valueOf(player.getHpMax()));
        pointsLabel.setText(String.valueOf(player.getPoints()));
    }//GEN-LAST:event_addVitLabelMouseClicked

    private void addAgiLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addAgiLabelMouseClicked
        playerService.addPoint(player, "agi", bladeTimer != null ? bladeTimer.isRunning() : false, blessTimer != null ? blessTimer.isRunning() : false);
        agiLabel.setText(String.valueOf(player.getAgi()));
        pointsLabel.setText(String.valueOf(player.getPoints()));
        if (playerTimer != null && playerTimer.isRunning()) {
            playerTimer.setDelay(battleService.getPlayerAttackRate(player));
        }
    }//GEN-LAST:event_addAgiLabelMouseClicked

    private void addStrLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addStrLabelMouseClicked
        playerService.addPoint(player, "str", bladeTimer != null ? bladeTimer.isRunning() : false, blessTimer != null ? blessTimer.isRunning() : false);
        strLabel.setText(String.valueOf(player.getStr()));
        pointsLabel.setText(String.valueOf(player.getPoints()));
    }//GEN-LAST:event_addStrLabelMouseClicked

    private void addCurseLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addCurseLabelMouseClicked
        playerService.addSkill(player, "curse");
        if (player.getCurseLevel() == 1) {
            curseToggleButton.setEnabled(true);
        }
        curseLevelLabel.setText(String.valueOf(player.getCurseLevel()));
        skillPointsLabel.setText(String.valueOf(player.getSkillPoints()));
    }//GEN-LAST:event_addCurseLabelMouseClicked

    private void addBlessLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addBlessLabelMouseClicked
        if (blessTimer != null && blessTimer.isRunning()) {
            return;
        }
        playerService.addSkill(player, "bless");
        if (player.getBlessLevel() == 1) {
            blessToggleButton.setEnabled(true);
        }
        blessLevelLabel.setText(String.valueOf(player.getBlessLevel()));
        skillPointsLabel.setText(String.valueOf(player.getSkillPoints()));
    }//GEN-LAST:event_addBlessLabelMouseClicked

    private void addHealLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addHealLabelMouseClicked
        playerService.addSkill(player, "heal");
        if (player.getHealLevel() == 1) {
            healToggleButton.setEnabled(true);
        }
        healLevelLabel.setText(String.valueOf(player.getHealLevel()));
        skillPointsLabel.setText(String.valueOf(player.getSkillPoints()));
    }//GEN-LAST:event_addHealLabelMouseClicked

    private void addBladeLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addBladeLabelMouseClicked
        if (bladeTimer != null && bladeTimer.isRunning()) {
            return;
        }
        playerService.addSkill(player, "blade");
        if (player.getBladeLevel() == 1) {
            bladeToggleButton.setEnabled(true);
        }
        bladeLevelLabel.setText(String.valueOf(player.getBladeLevel()));
        skillPointsLabel.setText(String.valueOf(player.getSkillPoints()));
    }//GEN-LAST:event_addBladeLabelMouseClicked

    private void travelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_travelButtonActionPerformed
        if (loadButton.isVisible()) {
            int result = JOptionPane.showConfirmDialog(null, Message.LOAD_ALERT[0], Message.LOAD_ALERT[1], JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
            System.out.println(result);
            if (result != JOptionPane.OK_OPTION) {
                return;
            }
            loadButton.setVisible(false);
        }

        if (player.getHp() == 0 || (playerTimer != null && playerTimer.isRunning())) {
            return;
        }
        enemy = new Enemy(player.getLevel());
        showEnemy();
        battleMsg.setText("");
        battleMsg.append(Message.MEET_MSG);

        playerTimer = new Timer(battleService.getPlayerAttackRate(player), new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int playerDmg = battleService.getPlayerDamage(player, enemy);
                battleMsg.append(Message.getPlayerDmgMsg(playerDmg));

                if (battleService.playerAttack(enemy, playerDmg)) {
                    playerTimer.stop();
                    enemyTimer.stop();
                    playerService.gainExp(player, enemy);
                    battleMsg.append(Message.getWinMsg(enemy.getExp()));
                }

                showPlayer();
                showEnemy();
            }
        });

        enemyTimer = new Timer(battleService.getEnemyAttackRate(enemy), new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int enemyDmg = battleService.getEnemyDamage(enemy, player);
                battleMsg.append(Message.getEnemyDmgMsg(enemyDmg));

                if (battleService.enemyAttack(player, enemyDmg)) {
                    playerTimer.stop();
                    enemyTimer.stop();
                    battleMsg.append(Message.LOSE_MSG);
                    JOptionPane.showConfirmDialog(null, Message.LOSE_ALERT[0], Message.LOSE_ALERT[1], JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
                    System.exit(0);
                }

                showPlayer();
                showEnemy();
            }
        });

        playerTimer.start();
        enemyTimer.start();
    }//GEN-LAST:event_travelButtonActionPerformed

    private void addFireLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addFireLabelMouseClicked
        playerService.addSkill(player, "fire");
        if (player.getFireLevel() == 1) {
            fireToggleButton.setEnabled(true);
        }
        fireLevelLabel.setText(String.valueOf(player.getFireLevel()));
        skillPointsLabel.setText(String.valueOf(player.getSkillPoints()));
    }//GEN-LAST:event_addFireLabelMouseClicked

    private void curseToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_curseToggleButtonActionPerformed
        if (enemy == null || enemy.getHp() == 0) {
            curseToggleButton.setSelected(false);
            battleMsg.append(Message.NOT_AVAILABLE_SKILL);
            return;
        }

        if (player.getMp() < SkillService.CURSE_MP) {
            curseToggleButton.setSelected(false);
            battleMsg.append(Message.NOT_ENOUGH_MP);
            return;
        }

        curseToggleButton.setEnabled(false);
        skillService.useCurse(player, enemy);
        showPlayer();
        battleMsg.append(Message.CURSE_MSG);

        curseToggleButton.setText("冷卻中");

        curseCoolDownTimer = new Timer(SkillService.CURSE_COOL_DOWN, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                curseToggleButton.setEnabled(true);
                curseToggleButton.setSelected(false);
                curseToggleButton.setText("詛咒術");
                curseCoolDownTimer.stop();
            }
        });

        curseCoolDownTimer.start();
    }//GEN-LAST:event_curseToggleButtonActionPerformed

    private void blessToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blessToggleButtonActionPerformed
        if (player.getHp() == 0) {
            blessToggleButton.setSelected(false);
            battleMsg.append(Message.NOT_AVAILABLE_SKILL);
            return;
        }

        if (player.getMp() < SkillService.BLESS_MP) {
            blessToggleButton.setSelected(false);
            battleMsg.append(Message.NOT_ENOUGH_MP);
            return;
        }

        blessToggleButton.setEnabled(false);
        skillService.enableBless(player);
        showPlayer();
        battleMsg.append(Message.BLESS_ENABLE_MSG);
        blessTimer = new Timer(SkillService.BLESS_TIME, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                skillService.disableBless(player);
                blessTimer.stop();
                blessCoolDown();
            }
        });
        blessTimer.start();
    }//GEN-LAST:event_blessToggleButtonActionPerformed

    private void blessCoolDown() {
        blessToggleButton.setText("冷卻中");
        battleMsg.append(Message.BLESS_DISABLE_MSG);
        blessCoolDownTimer = new Timer(SkillService.BLESS_COOL_DOWN, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                blessToggleButton.setEnabled(true);
                blessToggleButton.setSelected(false);
                blessToggleButton.setText("祝福術");
                blessCoolDownTimer.stop();
            }
        });
        blessCoolDownTimer.start();
    }

    private void healToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_healToggleButtonActionPerformed
        if (player.getHp() == 0 || player.getHp() == player.getHpMax()) {
            healToggleButton.setSelected(false);
            battleMsg.append(Message.NOT_AVAILABLE_SKILL);
            return;
        }

        if (player.getMp() < SkillService.HEAL_MP) {
            healToggleButton.setSelected(false);
            battleMsg.append(Message.NOT_ENOUGH_MP);
            return;
        }

        healToggleButton.setEnabled(false);
        battleMsg.append(Message.getHealMsg(skillService.useHeal(player)));

        showPlayer();

        healToggleButton.setText("冷卻中");

        healCoolDownTimer = new Timer(SkillService.HEAL_COOL_DOWN, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                healToggleButton.setEnabled(true);
                healToggleButton.setSelected(false);
                healToggleButton.setText("治癒術");
                healCoolDownTimer.stop();
            }
        });

        healCoolDownTimer.start();
    }//GEN-LAST:event_healToggleButtonActionPerformed

    private void bladeToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bladeToggleButtonActionPerformed
        if (player.getHp() == 0) {
            bladeToggleButton.setSelected(false);
            battleMsg.append(Message.NOT_AVAILABLE_SKILL);
            return;
        }

        if (player.getMp() < SkillService.BLADE_MP) {
            bladeToggleButton.setSelected(false);
            battleMsg.append(Message.NOT_ENOUGH_MP);
            return;
        }

        bladeToggleButton.setEnabled(false);
        skillService.enableBlade(player);
        showPlayer();
        battleMsg.append(Message.BLADE_ENABLE_MSG);
        bladeTimer = new Timer(SkillService.BLADE_TIME, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                skillService.disableBlade(player);
                bladeTimer.stop();
                bladeCoolDown();
            }
        });
        bladeTimer.start();
    }//GEN-LAST:event_bladeToggleButtonActionPerformed

    private void bladeCoolDown() {
        bladeToggleButton.setText("冷卻中");
        battleMsg.append(Message.BLADE_DISABLE_MSG);
        bladeCoolDownTimer = new Timer(SkillService.BLADE_COOL_DOWN, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                bladeToggleButton.setEnabled(true);
                bladeToggleButton.setSelected(false);
                bladeToggleButton.setText("魔力劍");
                bladeCoolDownTimer.stop();
            }
        });
        bladeCoolDownTimer.start();
    }

    private void fireToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fireToggleButtonActionPerformed
        if (enemy == null || enemy.getHp() == 0 || player.getHp() == 0) {
            fireToggleButton.setSelected(false);
            battleMsg.append(Message.NOT_AVAILABLE_SKILL);
            return;
        }

        if (player.getMp() < SkillService.FIRE_MP) {
            fireToggleButton.setSelected(false);
            battleMsg.append(Message.NOT_ENOUGH_MP);
            return;
        }

        fireToggleButton.setEnabled(false);
        battleMsg.append(Message.getFireDmgMsg(skillService.useFire(player, enemy)));

        if (enemy.getHp() == 0) {
            playerTimer.stop();
            enemyTimer.stop();
            playerService.gainExp(player, enemy);
            battleMsg.append(Message.getWinMsg(enemy.getExp()));
        }

        showPlayer();
        showEnemy();

        fireToggleButton.setText("冷卻中");

        fireCoolDownTimer = new Timer(SkillService.FIRE_COOL_DOWN, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                fireToggleButton.setEnabled(true);
                fireToggleButton.setSelected(false);
                fireToggleButton.setText("火球術");
                fireCoolDownTimer.stop();
            }
        });

        fireCoolDownTimer.start();
    }//GEN-LAST:event_fireToggleButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if (playerTimer != null && playerTimer.isRunning()) {
            battleMsg.append(Message.NOT_AVAILABLE_SAVE);
            return;
        }
        playerService.savePlayer(player);
        battleMsg.append(Message.SAVE_SUCCESS);
    }//GEN-LAST:event_saveButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        Player loadPlayer = playerService.loadPlayer();
        if (loadPlayer != null) {
            player = playerService.loadPlayer();
            skillService.calculateMp(player);
            showPlayer();
            showSkills();
            battleMsg.append(Message.LOAD_SUCCESS);
            loadButton.setVisible(false);
        } else {
            battleMsg.append(Message.LOAD_FAIL);
        }
    }//GEN-LAST:event_loadButtonActionPerformed

    private void battleMsgKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_battleMsgKeyReleased
        int key = evt.getKeyCode();
        if (key == KeyEvent.VK_P) {
            ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
            try {
                System.out.println(ow.writeValueAsString(player));
            } catch (JsonProcessingException ex) {
                Logger.getLogger(NewGeimuUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (key == KeyEvent.VK_G) {
            player.setExp(player.getExp() + 10000);
            showPlayer();
        }
    }//GEN-LAST:event_battleMsgKeyReleased

    private void showPlayer() {
        levelLabel.setText(String.valueOf(player.getLevel()));
        hpLabel.setText(String.valueOf(player.getHp()));
        hpMaxLabel.setText(String.valueOf(player.getHpMax()));
        mpLabel.setText(String.valueOf(player.getMp()));
        mpMaxLabel.setText(String.valueOf(player.getMpMax()));
        expLabel.setText(String.valueOf(player.getExp()));
        expMaxLabel.setText(String.valueOf(player.getExpMax()));
        expProgressBar.setMaximum(player.getExpMax());
        expProgressBar.setValue(player.getExp());
        expProgressBar.setToolTipText(Math.round((double) player.getExp() / (double) player.getExpMax() * 10000.0) / 100.0 + "%");
        strLabel.setText(String.valueOf(player.getStr()));
        agiLabel.setText(String.valueOf(player.getAgi()));
        vitLabel.setText(String.valueOf(player.getVit()));
        wisLabel.setText(String.valueOf(player.getWis()));
        dexLabel.setText(String.valueOf(player.getDex()));
        lukLabel.setText(String.valueOf(player.getLuk()));
        pointsLabel.setText(String.valueOf(player.getPoints()));
        skillPointsLabel.setText(String.valueOf(player.getSkillPoints()));
        fireLevelLabel.setText(String.valueOf(player.getFireLevel()));
        bladeLevelLabel.setText(String.valueOf(player.getBladeLevel()));
        healLevelLabel.setText(String.valueOf(player.getHealLevel()));
        blessLevelLabel.setText(String.valueOf(player.getBlessLevel()));
        curseLevelLabel.setText(String.valueOf(player.getCurseLevel()));
    }

    private void showEnemy() {
        monLevelLabel.setText(String.valueOf(enemy.getLevel()));
        monHpLabel.setText(String.valueOf(enemy.getHp()));
        monHpMaxLabel.setText(String.valueOf(enemy.getHpMax()));
    }

    private void showSkills() {
        fireToggleButton.setEnabled(player.getFireLevel() > 0);
        bladeToggleButton.setEnabled(player.getBladeLevel() > 0);
        healToggleButton.setEnabled(player.getHealLevel() > 0);
        blessToggleButton.setEnabled(player.getBlessLevel() > 0);
        curseToggleButton.setEnabled(player.getCurseLevel() > 0);
    }

    private void setMpRecoverTimer() {
        mpRecoverTimer = new Timer(10000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                playerService.recoverMp(player);
                showPlayer();
            }
        });
        mpRecoverTimer.start();
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewGeimuUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new NewGeimuUI().setVisible(true);
            }
        });
    }

    private void initGeimu() {
        showPlayer();
        setMpRecoverTimer();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addAgiLabel;
    private javax.swing.JLabel addBladeLabel;
    private javax.swing.JLabel addBlessLabel;
    private javax.swing.JLabel addCurseLabel;
    private javax.swing.JLabel addDexLabel;
    private javax.swing.JLabel addFireLabel;
    private javax.swing.JLabel addHealLabel;
    private javax.swing.JLabel addLukLabel;
    private javax.swing.JLabel addStrLabel;
    private javax.swing.JLabel addVitLabel;
    private javax.swing.JLabel addWisLabel;
    private javax.swing.JLabel agiLabel;
    private javax.swing.JLabel agiTextLabel;
    private javax.swing.JScrollPane ballteMsgScrollPane;
    private javax.swing.JTextArea battleMsg;
    private javax.swing.JPanel battleMsgPanel;
    private javax.swing.JLabel bladeLevelLabel;
    private javax.swing.JLabel bladeLevelTextLabel;
    private javax.swing.JToggleButton bladeToggleButton;
    private javax.swing.JLabel blessLevelLabel;
    private javax.swing.JLabel blessLevelTextLabel;
    private javax.swing.JToggleButton blessToggleButton;
    private javax.swing.JLabel curseLevelLabel;
    private javax.swing.JLabel curseLevelTextLabel;
    private javax.swing.JToggleButton curseToggleButton;
    private javax.swing.JLabel dexLabel;
    private javax.swing.JLabel dexTextLabel;
    private javax.swing.JPanel enemyPanel;
    private javax.swing.JLabel expLabel;
    private javax.swing.JLabel expMaxLabel;
    private javax.swing.JProgressBar expProgressBar;
    private javax.swing.JLabel expSplitTextLabel;
    private javax.swing.JLabel expTextLabel;
    private javax.swing.JLabel fireLevelLabel;
    private javax.swing.JLabel fireLevelTextLabel;
    private javax.swing.JToggleButton fireToggleButton;
    private javax.swing.JLabel healLevelLabel;
    private javax.swing.JLabel healLevelTextLabel;
    private javax.swing.JToggleButton healToggleButton;
    private javax.swing.JLabel hpLabel;
    private javax.swing.JLabel hpMaxLabel;
    private javax.swing.JLabel hpSplitTextLabel;
    private javax.swing.JLabel hpTextLabel;
    private javax.swing.JLabel levelLabel;
    private javax.swing.JLabel levelTextLabel;
    private javax.swing.JButton loadButton;
    private javax.swing.JLabel lukLabel;
    private javax.swing.JLabel lukTextLabel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel monHpLabel;
    private javax.swing.JLabel monHpMaxLabel;
    private javax.swing.JLabel monHpSplitTextLabel;
    private javax.swing.JLabel monHpTextLabel;
    private javax.swing.JLabel monLevelLabel;
    private javax.swing.JLabel monLevelTextLabel;
    private javax.swing.JLabel monNameTextLabel;
    private javax.swing.JLabel mpLabel;
    private javax.swing.JLabel mpMaxLabel;
    private javax.swing.JLabel mpSplitTextLabel;
    private javax.swing.JLabel mpTextLabel;
    private javax.swing.JPanel playerPanel;
    private javax.swing.JLabel playerTextLabel;
    private javax.swing.JLabel pointsLabel;
    private javax.swing.JLabel pointsTextLabel;
    private javax.swing.JButton saveButton;
    private javax.swing.JPanel skillPanel;
    private javax.swing.JLabel skillPointsLabel;
    private javax.swing.JLabel skillPointsTextLabel;
    private javax.swing.JLabel skillsTextLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JLabel statusTextLabel;
    private javax.swing.JLabel strLabel;
    private javax.swing.JLabel strTextLabel;
    private javax.swing.JButton travelButton;
    private javax.swing.JLabel vitLabel;
    private javax.swing.JLabel vitTextLabel;
    private javax.swing.JLabel wisLabel;
    private javax.swing.JLabel wisTextLabel;
    // End of variables declaration//GEN-END:variables
}
